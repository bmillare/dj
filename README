# Description

In a nutshell, dj is an attempt to make a clojure distribution. In the
same way that debian (and APT) is to linux, dj is to clojure.

dj takes the cacaphony of java, git, clojure, and build tools and
mixes it into something harmonious. The goal is to maintain a
consistent layout of directories with certain expectations with
regards to their contents. At the moment, its more of a specification
then code. In the future, dj should provide additional glue tools that
coordinate tasks from a basic set of tools.

The tools are designed to provide managing dependencies for projects
at the system level. Tools should allow dependencies to be searched,
determined, downloaded to the repository, and removed from the
repository.

dj inherits certain principles from clojure and utilizes it in its
design. Repositories are dynamic changing and differing structures,
but the dependencies are considered immutable. Dependencies with the
same version must be the same in any repository. Repositories are best
thought of as caches and there is a local repository in the
system. Dependencies are resolved lazily in that poms, the files that
contain the dependency information, are obtained lazily, ie. there is
no need to maintain a complete tree of pom files. The catch is you
need an internet connection to ensure pom files are downloaded as
necessary. It is conceivable to sync with repositories that have many
projects to permit offline usage.

Using Maven repositories for rapidly developing projects is difficult,
dj tries to rectify this by creating repositories for live projects
that are managed by versioning software such as git, svn, and dj
itself.

# Features

-need to be able create directory in the live repository, a project.clj file
 and be able to start project from commandline
-manage system dependencies, native dependencies, live sources, and jars

# File Directory Structure

-The design of the directory hierarchy is based of the design of linux's
 specifically, gentoo's
-every time you create a directory with these subdirectories, you
 create a new system, thus you can have many clojure systems on one
 computer

-the only way to run concurrently different systems is (under unix)
 to create new bash environments each time

bin/
 -dj binaries and scripts to manage system
src/
 -source code for dj
lib/ classes/
 -for dj only

-the remaining directories are ignored by git (listed in .gitignore)

usr/
 -local (non-system) content
usr/src
 -repository for live projects
usr/bin
 -native dep binaries
usr/tmp
 -experimental repository
etc/
 -system configuration files
sbin/
 -this directory is required only if the local system does not provide
  the dependencies
 -contains system dependency binaries, binaries necessary to run clojure
  and dj, this is designed to be minimal
 -pretty much its the jdk and git
opt/
 -location of system and native dependencies that need to persist
 -basically the install directory for java
tmp/
 -contains transient files
tmp/dj
 -workspace for building system and native dependencies

# Script descriptions

setup-directories.sh
-create directories
boostrap-system-deps.sh
-download install java
-download, build, install git
-not normal way, not necessary if you can bootstrap system deps from
 the host distribution/OS

# dj concepts

system
-a checkout/snapshot of the dj project with its dependencies
 fulfilled

live dependency
-a dependency on the current state (live) of some project's directory
-should just be a path
-to deal with directory name collisions, append directory with a slot,
 which is just a counter, e.g. leiningen-1, leinigen-2
-dj should be able to wrap generating folder names for you, dj will
 just increment the largest value, names are arbitrary, and a name
 without a counter is considered the 0 directory
-the code you work on in a typical leiningen project is considered
 live dependencies, which have the property that if you change the
 files, reloading the file should change the definition

checkout dependency
-a dependency on project directory with a particular commit
-dj should automatically download project and switch to version/commit

# dj functionality

-update, updates system dependencies
-dj swank, launch a swank server
-dj jar, make a jar of project
-dj install, install in local repository
-dj upload, install in remote repository

# INSTALL instructions

-download and extract dj snapshot for architecture/OS
-run update

# Author

Brent Millare
brent.millare@gmail.com